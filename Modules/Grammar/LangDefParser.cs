//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LangDef.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace projeto_compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class LangDefParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, OPEN_PARENTHESIS=5, CLOSE_PARENTHESIS=6, 
		SEMI_COLON=7, OPERATOR=8, ATTR=9, ID=10, NUMBER=11, WHITE_SPACE=12;
	public const int
		RULE_prog = 0, RULE_bloco = 1, RULE_cmd = 2, RULE_cmdRead = 3, RULE_cmdWrite = 4, 
		RULE_cmdAttr = 5, RULE_expr = 6, RULE_term = 7;
	public static readonly string[] ruleNames = {
		"prog", "bloco", "cmd", "cmdRead", "cmdWrite", "cmdAttr", "expr", "term"
	};

	private static readonly string[] _LiteralNames = {
		null, "'program'", "'endprog'", "'read'", "'write'", "'('", "')'", "';'", 
		null, "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"SEMI_COLON", "OPERATOR", "ATTR", "ID", "NUMBER", "WHITE_SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LangDef.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LangDefParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LangDefParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LangDefParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangDefListener typedListener = listener as ILangDefListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangDefListener typedListener = listener as ILangDefListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			Match(T__0);
			State = 17;
			bloco();
			State = 18;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CmdContext[] cmd() {
			return GetRuleContexts<CmdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmdContext cmd(int i) {
			return GetRuleContext<CmdContext>(i);
		}
		public BlocoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bloco; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangDefListener typedListener = listener as ILangDefListener;
			if (typedListener != null) typedListener.EnterBloco(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangDefListener typedListener = listener as ILangDefListener;
			if (typedListener != null) typedListener.ExitBloco(this);
		}
	}

	[RuleVersion(0)]
	public BlocoContext bloco() {
		BlocoContext _localctx = new BlocoContext(Context, State);
		EnterRule(_localctx, 2, RULE_bloco);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 20;
				cmd();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1048L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CmdReadContext cmdRead() {
			return GetRuleContext<CmdReadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmdWriteContext cmdWrite() {
			return GetRuleContext<CmdWriteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmdAttrContext cmdAttr() {
			return GetRuleContext<CmdAttrContext>(0);
		}
		public CmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangDefListener typedListener = listener as ILangDefListener;
			if (typedListener != null) typedListener.EnterCmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangDefListener typedListener = listener as ILangDefListener;
			if (typedListener != null) typedListener.ExitCmd(this);
		}
	}

	[RuleVersion(0)]
	public CmdContext cmd() {
		CmdContext _localctx = new CmdContext(Context, State);
		EnterRule(_localctx, 4, RULE_cmd);
		try {
			State = 28;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 25;
				cmdRead();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 26;
				cmdWrite();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 27;
				cmdAttr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdReadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(LangDefParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LangDefParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(LangDefParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI_COLON() { return GetToken(LangDefParser.SEMI_COLON, 0); }
		public CmdReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmdRead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangDefListener typedListener = listener as ILangDefListener;
			if (typedListener != null) typedListener.EnterCmdRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangDefListener typedListener = listener as ILangDefListener;
			if (typedListener != null) typedListener.ExitCmdRead(this);
		}
	}

	[RuleVersion(0)]
	public CmdReadContext cmdRead() {
		CmdReadContext _localctx = new CmdReadContext(Context, State);
		EnterRule(_localctx, 6, RULE_cmdRead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			Match(T__2);
			State = 31;
			Match(OPEN_PARENTHESIS);
			State = 32;
			Match(ID);
			State = 33;
			Match(CLOSE_PARENTHESIS);
			State = 34;
			Match(SEMI_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdWriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(LangDefParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LangDefParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(LangDefParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI_COLON() { return GetToken(LangDefParser.SEMI_COLON, 0); }
		public CmdWriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmdWrite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangDefListener typedListener = listener as ILangDefListener;
			if (typedListener != null) typedListener.EnterCmdWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangDefListener typedListener = listener as ILangDefListener;
			if (typedListener != null) typedListener.ExitCmdWrite(this);
		}
	}

	[RuleVersion(0)]
	public CmdWriteContext cmdWrite() {
		CmdWriteContext _localctx = new CmdWriteContext(Context, State);
		EnterRule(_localctx, 8, RULE_cmdWrite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			Match(T__3);
			State = 37;
			Match(OPEN_PARENTHESIS);
			State = 38;
			Match(ID);
			State = 39;
			Match(CLOSE_PARENTHESIS);
			State = 40;
			Match(SEMI_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdAttrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LangDefParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTR() { return GetToken(LangDefParser.ATTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI_COLON() { return GetToken(LangDefParser.SEMI_COLON, 0); }
		public CmdAttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmdAttr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangDefListener typedListener = listener as ILangDefListener;
			if (typedListener != null) typedListener.EnterCmdAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangDefListener typedListener = listener as ILangDefListener;
			if (typedListener != null) typedListener.ExitCmdAttr(this);
		}
	}

	[RuleVersion(0)]
	public CmdAttrContext cmdAttr() {
		CmdAttrContext _localctx = new CmdAttrContext(Context, State);
		EnterRule(_localctx, 10, RULE_cmdAttr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(ID);
			State = 43;
			Match(ATTR);
			State = 44;
			expr();
			State = 45;
			Match(SEMI_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPERATOR() { return GetTokens(LangDefParser.OPERATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR(int i) {
			return GetToken(LangDefParser.OPERATOR, i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangDefListener typedListener = listener as ILangDefListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangDefListener typedListener = listener as ILangDefListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			term();
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPERATOR) {
				{
				{
				State = 48;
				Match(OPERATOR);
				State = 49;
				term();
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LangDefParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(LangDefParser.NUMBER, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangDefListener typedListener = listener as ILangDefListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangDefListener typedListener = listener as ILangDefListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 14, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			_la = TokenStream.LA(1);
			if ( !(_la==ID || _la==NUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,12,58,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,1,0,1,1,4,1,22,8,1,11,1,12,1,23,1,2,1,2,1,2,3,2,29,8,2,
		1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
		6,1,6,1,6,5,6,51,8,6,10,6,12,6,54,9,6,1,7,1,7,1,7,0,0,8,0,2,4,6,8,10,12,
		14,0,1,1,0,10,11,53,0,16,1,0,0,0,2,21,1,0,0,0,4,28,1,0,0,0,6,30,1,0,0,
		0,8,36,1,0,0,0,10,42,1,0,0,0,12,47,1,0,0,0,14,55,1,0,0,0,16,17,5,1,0,0,
		17,18,3,2,1,0,18,19,5,2,0,0,19,1,1,0,0,0,20,22,3,4,2,0,21,20,1,0,0,0,22,
		23,1,0,0,0,23,21,1,0,0,0,23,24,1,0,0,0,24,3,1,0,0,0,25,29,3,6,3,0,26,29,
		3,8,4,0,27,29,3,10,5,0,28,25,1,0,0,0,28,26,1,0,0,0,28,27,1,0,0,0,29,5,
		1,0,0,0,30,31,5,3,0,0,31,32,5,5,0,0,32,33,5,10,0,0,33,34,5,6,0,0,34,35,
		5,7,0,0,35,7,1,0,0,0,36,37,5,4,0,0,37,38,5,5,0,0,38,39,5,10,0,0,39,40,
		5,6,0,0,40,41,5,7,0,0,41,9,1,0,0,0,42,43,5,10,0,0,43,44,5,9,0,0,44,45,
		3,12,6,0,45,46,5,7,0,0,46,11,1,0,0,0,47,52,3,14,7,0,48,49,5,8,0,0,49,51,
		3,14,7,0,50,48,1,0,0,0,51,54,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,13,
		1,0,0,0,54,52,1,0,0,0,55,56,7,0,0,0,56,15,1,0,0,0,3,23,28,52
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace projeto_compiler
